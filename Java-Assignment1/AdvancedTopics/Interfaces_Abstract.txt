Abstract Classes : An abstract class in Java is a class that cannot be instantiated 
and is meant to be extended by other classes. It can contain both abstract methods
(without implementation) and concrete methods (with implementation), allowing 
subclasses to inherit common behavior while enforcing the implementation of 
specific methods. Abstract classes can also have instance variables, constructors, 
and non-abstract methods, making them useful when multiple related classes share 
some behavior but also require customization.

Example: 
abstract class Animal {
    String name;
    Animal(String name) {
        this.name = name;
    }
    // Abstract method (must be implemented by subclasses)
    abstract void makeSound();
    void eat() {
        System.out.println(name + " is eating.");
    }
}

// Subclass Dog
class Dog extends Animal {
    Dog(String name) {
        super(name);
    }

    // Implementing the abstract method
    void makeSound() {
        System.out.println(name + " barks: Woof! Woof!");
    }
}

// Subclass Cat
class Cat extends Animal {
    Cat(String name) {
        super(name);
    }

    // Implementing the abstract method
    void makeSound() {
        System.out.println(name + " meows: Meow! Meow!");
    }
}




Interfaces :  An interface in Java is a blueprint that contains only abstract methods 
(before Java 8) and is meant to be implemented by classes. Unlike abstract classes, 
interfaces do not hold state (i.e., no instance variables) and cannot have 
constructors. They are used to achieve multiple inheritance in Java, as a class can 
implement multiple interfaces. Interfaces define a contract that implementing 
classes must follow, ensuring that all required methods are implemented.

Example:
interface Vehicle {
    void start(); // Abstract method (no implementation)
    void stop();  // Abstract method (no implementation)
}

// Implementing the interface in a Car class
class Car implements Vehicle {
    public void start() {
        System.out.println("Car is starting...");
    }

    public void stop() {
        System.out.println("Car is stopping...");
    }
}

// Implementing the interface in a Bike class
class Bike implements Vehicle {
    public void start() {
        System.out.println("Bike is starting...");
    }

    public void stop() {
        System.out.println("Bike is stopping...");
    }
}
